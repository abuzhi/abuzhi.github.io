<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/25/hello-world/"/>
    <url>/2022/11/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql8.x 搭建及配置</title>
    <link href="/2022/11/01/2022-11-01-mysql-8.x-win-config/"/>
    <url>/2022/11/01/2022-11-01-mysql-8.x-win-config/</url>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>mysql8.x 搭建及配置</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>到mysql官网下载mysql 8.x的zip文件</p><p>下载zip包，解压到自定义目录<br>win下：找个没有空格和中文路径的目录直接解压即可</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>win下：</p><blockquote><p>MYSQL_HOME&#x3D;D:\data\mysql8<br>PATH 中加入 %MYSQL_HOME%\bin</p></blockquote><p>同理，linux中也要在环境变量中加入上面配置</p><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><p>win中，建配置文件<br>需要有几个注意的地方：</p><ol><li>datadir 对应的目录不用手动建，初始化data目录时会自动创建。自己建可能会有问题</li><li>字符集全用utf8mb4的，utf-8下，1字符&#x3D;3字节。（uft-8也称之为utf-8mb3）utf-8mb4下，1字符&#x3D;4字节。varchar的存储上限是65535字节，对存储汉字有区别</li></ol><p>mysql 配置文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">23306</span><br><span class="hljs-attr">basedir</span>=D:/data/mysql8<br><span class="hljs-attr">datadir</span>=D:/data/mysql8/data<br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">2000</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-section">[client]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">23306</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-section">[mysqladmin]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqlcheck]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqldump]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqlimport]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqlshow]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>cd 到 mysql 文件夹的 bin 目录下，执行如下初始化命令：<br>mysqld –initialize  –console 随机密码<br>mysqld –initialize-insecure –console 无密码模式</p><p>mysqld –console 命令行启动服务</p><p>win下安装mysql服务<br>mysqld –install<br>启动：net start mysql</p><p>修改密码<br>set password for root@localhost&#x3D;’12345678’;</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序Log框架梳理及冲突解决</title>
    <link href="/2021/08/01/2021-08-01-java-log-frameworks/"/>
    <url>/2021/08/01/2021-08-01-java-log-frameworks/</url>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>Java程序Log框架梳理及冲突解决</p><p><img src="/images/2021-08-01/image2021-3-10_18_52_25.png"></p><h2 id="一、Log框架简介"><a href="#一、Log框架简介" class="headerlink" title="一、Log框架简介"></a>一、Log框架简介</h2><p>java的log框架分为两类：</p><p>记录型日志框架: 具体实现log功能的框架，也就是代码运行时，真正append log数据的框架，目前有四个</p><p>Log4j  ： 最初的log框架<br>J.U.L ：jdk自带的log类，(java.util.logging) 也常称为JDKLog、jdk-logging，自Java1.4以来的官方日志实现。<br>Log4j2-core ：log4j的升级版，有很多<br>Logback：log4j2诞生前做的相对log4j的大优化框架，性能比log4j高很多，与log4j2差不多</p><p>门面型日志框架:  为了能在大项目中，合并各log实现框架的冲突问题，开发出的桥接类型的日志框架，里面无具体日志append实现，只有接口。即面向接口编程的框架，目前有两个：</p><p>SLF4J：用的比较多的桥接日志框架，桥类比较多，也是比较头疼的一个,全称Simple Logging Facade for Java。官网 <a href="http://www.slf4j.org/">http://www.slf4j.org/</a><br>J.C.L：在slf4j诞生前，apache开发的桥类，以前叫 (Jakarta Commons Logging)，也叫 Apache Common logging，现在叫 (commons-logging)<br>Log4j-api: Log4j 2.x 后，将log4j的接口独立的包</p><h2 id="二、Log框架的演化"><a href="#二、Log框架的演化" class="headerlink" title="二、Log框架的演化"></a>二、Log框架的演化</h2><p>要明白log框架目前的混乱问题，我们得先理一下其发展过程，整明白各日志框架间的关系</p><p><img src="/images/2021-08-01/image2021-3-10_18_52_25.png"></p><h3 id="2-1-蛮荒时代：System-out和System-err"><a href="#2-1-蛮荒时代：System-out和System-err" class="headerlink" title="2.1 蛮荒时代：System.out和System.err"></a>2.1 蛮荒时代：System.out和System.err</h3><p>在java 1.4之前，java自己没有自带的log实现，所有的日志统计都是以System.out和System.err进行输出的。麻烦，不可配置，不灵活。</p><p>此时间应该是在jdk1.4发布之前的情况，时间上应该是2002年之前</p><h3 id="2-2-最初统一：log4j-的诞生"><a href="#2-2-最初统一：log4j-的诞生" class="headerlink" title="2.2 最初统一：log4j 的诞生"></a>2.2 最初统一：log4j 的诞生</h3><p>在1996年初，E.U.SEMPER（欧洲安全电子市场）项目决定编写自己的跟踪API，最后该API演变为Log4j，Log4j日志软件包一经推出就备受欢迎，这里有一个主要贡献者：Ceki Gülcü，记住这个人，一切才刚刚开始。。。</p><p>后来Log4j成为了Apache基金会项目中的一员，同时Log4j的火爆，让Log4j一度成为业内日志标杆。（据说Apache基金会还曾经建议Sun引入Log4j到java的标准库中，但是sun拒绝了）</p><p>此日志一直在大规模使用，目前也还有好多框架是用的这个，虽然Log4j项目已经在2015年 End Of Life了。。但是，挡不住一直有人用哇。。。</p><p><img src="/images/2021-08-01/image2021-3-10_18_27_25.png"> </p><h3 id="2-3-Java跟风：JUL（java-util-logging）发布"><a href="#2-3-Java跟风：JUL（java-util-logging）发布" class="headerlink" title="2.3 Java跟风：JUL（java.util.logging）发布"></a>2.3 Java跟风：JUL（java.util.logging）发布</h3><p>Sun没有直接将log4j放入jdk组件中，而是自己仿照log4j 实现了一套自己的日志库，即java.util.logging。。。</p><p>从2002年2月发布jdk1.4开始，java中就自带有自己的log框架了。</p><p>真的是仿照（或许叫抄袭？），毕竟log4j流行那么久了。但是使用起来，还是没有log4j好用。</p><p>这就尴尬了，自带的不行，但是起码有人在用。</p><h3 id="2-4-混乱初阶：JCL-（Jakarta-Commons-Logging）发布"><a href="#2-4-混乱初阶：JCL-（Jakarta-Commons-Logging）发布" class="headerlink" title="2.4 混乱初阶：JCL （Jakarta Commons Logging）发布"></a>2.4 混乱初阶：JCL （Jakarta Commons Logging）发布</h3><p>Sun自带了jul日志，之前的log4j还归属于apache，这里就有问题了，用户开发程序引入不同的日志类型时，就容易冲突或者导致打日志混乱的问题。所以apache推出了第一个接口类型日志框架：JCL。</p><p>当然初始目的是好的，让用户可以在Log4j和JUL日志框架间进行自由切换。这里面还有个坑，JCL自带了个默认实现，就是Simple Log ，这个日志实现导致实际上有了三种日志实现框架。</p><p>看第一版发布日期，应该是apache想和Sun对干或者想统一日志江湖。与Sun JUL发布相差6个月。</p><p>这个框架应该是没有Ceki 参与，<br>S<br><img src="/images/2021-08-01/image2021-3-10_18_15_39.png"> </p><p>实际使用中，虽然JCL能实现日志框架的统一，比较优雅，但是使用中遇到的问题还是很多。</p><p>有个吐槽，说明一切<br><img src="/images/2021-08-01/image2021-3-10_18_24_3.png"> </p><p>jcl 推出后，log的统一可以如下：<br><img src="/images/2021-08-01/image2021-3-10_18_24_3.png"> </p><h3 id="2-5-争霸开始：Slf4j-接口框架和桥的诞生"><a href="#2-5-争霸开始：Slf4j-接口框架和桥的诞生" class="headerlink" title="2.5 争霸开始：Slf4j 接口框架和桥的诞生"></a>2.5 争霸开始：Slf4j 接口框架和桥的诞生</h3><p>大神来了</p><p>2006年，Log4j的作者Ceki Gülcü离开Apache后，觉得J.C.L这套接口设计的不好，容易让开发者写出有性能问题的代码。</p><p>也是仿照J.C.L的接口类，自己搞出了一套接口框架，就是Slf4j。</p><p>但是Slf4j只有接口，没有实现，大神也没有能力去推动apache log4j 和sun log 去实现Slf4j的接口，这里就体现出大神的牛逼了，自己写各适配器。。。</p><p>适配器可解决一切，桥接是万能的。。哈哈哈。。。这里就开始出现混乱的东西了：</p><p>大神先写了桥接jul和log4j的包，结构如下</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>LogFramework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Log</tag>
      
      <tag>Log4j</tag>
      
      <tag>Slf4j</tag>
      
      <tag>logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA源码--StringBuffer,StringBuilder,String</title>
    <link href="/2021/05/18/2017-05-18-JAVA-SRC-StringBuffer-StringBuilder/"/>
    <url>/2021/05/18/2017-05-18-JAVA-SRC-StringBuffer-StringBuilder/</url>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>StringBuffer,StringBuilder,String 类源码实现机制详解</p><p><img src="/images/2017-05-18/JAVA-SRC-StringBuffer-StringBuilder-StringBuffer.jpg">{: .normal }<br><img src="/images/2017-05-18/JAVA-SRC-StringBuffer-StringBuilder-StringBuilder.jpg">{: .normal }</p><h2 id="二者区别与联系"><a href="#二者区别与联系" class="headerlink" title="二者区别与联系"></a>二者区别与联系</h2><blockquote><p>二都都继承自父类AbstractStringBuilder</p></blockquote><blockquote><p>对应方法中，StringBuffer 加入了synchronized所以说是线程安全的</p></blockquote><h3 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h3><blockquote><p>机制源于父类AbstractStringBuilder</p></blockquote><ol><li><p>计算最小长度</p></li><li><p>按原串双倍计算，如果小，则直接加上后串的长度</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Appendable</span>, CharSequence &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The value is used for character storage.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">char</span>[] value;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The count is the number of characters used.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> count;<br><br>        ....<br><br>        <span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span> &#123;<br>            <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> appendNull();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> str.length();<br>            ensureCapacityInternal(count + len);<br>            str.getChars(<span class="hljs-number">0</span>, len, value, count);<br>            count += len;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        ....<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>            <span class="hljs-comment">// overflow-conscious code</span><br>            <span class="hljs-keyword">if</span> (minimumCapacity - value.length &gt; <span class="hljs-number">0</span>)<br>                expandCapacity(minimumCapacity);<br>        &#125;    <br>        <br>        ....<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">expandCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> value.length * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (newCapacity - minimumCapacity &lt; <span class="hljs-number">0</span>)<br>                newCapacity = minimumCapacity;<br>            <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (minimumCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>                newCapacity = Integer.MAX_VALUE;<br>            &#125;<br>            value = Arrays.copyOf(value, newCapacity);<br>        &#125;            <br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="String-的不可变性"><a href="#String-的不可变性" class="headerlink" title="String 的不可变性"></a>String 的不可变性</h2><p><a href="https://www.zhihu.com/question/20618891"><strong>String 不可变参考</strong></a> </p><p>String 的不可变性在其源码中可以看出为什么不可变：</p><ol><li>String是类型的，不可继承，防止被子类修改</li><li>其本质为char数组，采用了private final修饰，就可以避免我们手动修改数组内的内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** String本质是个char数组. 而且用final关键字修饰.</span><br><span class="hljs-comment">    String是不可变的关键都在底层的实现，而不是一个final</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br><br>    <span class="hljs-comment">/** Cache the hash code for the string */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hash; <span class="hljs-comment">// Default to 0</span><br><br><br>    ....<br><br>    ....<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SourceCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>StringBuffer</tag>
      
      <tag>StringBuilder</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下 Git，TortoiseGit及Git在IDE工具中的使用</title>
    <link href="/2017/05/18/2017-09-12-how-to-use-git-and-ide/"/>
    <url>/2017/05/18/2017-09-12-how-to-use-git-and-ide/</url>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><p>Git，TortoiseGit及Git在IDE工具中的使用</p><hr><h2 id="一-Git基础介绍"><a href="#一-Git基础介绍" class="headerlink" title="一. Git基础介绍"></a>一. Git基础介绍</h2><ul><li><p>要认识Git是做什么的，为什么要使用这个工具，就需要先阅读一下Git相关的入门知识，及与其他版本控制工具的异同，优劣。</p></li><li><p><strong>注意：本文重点偏重于Git,TortoiseGit以及Git在IDEA等开发工具日常安装与使用上。其中对TortoiseGit和IDEA的使用会着重讲，但是对Git命令行操作，不做讲解，如想了解git bash相关命令，可点击下面两篇资料进行学习。</strong></p></li><li><p>对于Git的认识及入门知识，笔者先贴两篇资料，可以先补充一下这方面知识，或者做全面学习资料亦可：</p></li></ul><blockquote><pre><code class="hljs">Git起步：&lt;http://blog.jobbole.com/25775/&gt; , &lt;https://git-scm.com/book/zh/v2&gt;</code></pre></blockquote><blockquote><pre><code class="hljs">Git教程：&lt;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&gt;</code></pre></blockquote><h2 id="二-Git-与-TortoiseGit-安装"><a href="#二-Git-与-TortoiseGit-安装" class="headerlink" title="二. Git 与 TortoiseGit 安装"></a>二. Git 与 TortoiseGit 安装</h2><blockquote><p>Git 下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></blockquote><blockquote><p>TortoiseGit 下载地址：<a href="https://tortoisegit.org/download">https://tortoisegit.org/download</a> </p></blockquote><p>按自己的操作系统选择下载相应版本。</p><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p>先安装Git.xxx.exe，安装路径自己设置或者默认，其他选项都按默认来就行。其中需要说明中间几个选项的意思：</p><p><img src="/images/2017-09-12/git-1.jpg" alt="Git安装过程-图1"> 图-2.1</p><ul><li><p>选项1 ：此选项不会先环境变量中加入git命令目录，只能使用Git Bash命令行操作。不建议新手安装此项。</p></li><li><p>选项2 ：默认选项，只会加入最小量的信息到环境变量中，可以使用Git Bash 和windows 命令行进行操作。建议安装此项。</p></li><li><p>选项3 ：此项会把unix tools 相关命令和Git Bash命令都加入到windows环境变量中，会污染系统，比如会覆盖掉windows自带的find等命令，不建议安装此项。</p></li></ul><hr><p><img src="/images/2017-09-12/git-2.jpg" alt="Git安装过程-图2"> 图-2.2</p><blockquote><p>CRLF是Carriage-Return Line-Feed的缩写，意思是回车换行，就是回车(CR, ASCII 13, \r) 换行(LF, ASCII 10, \n)<br>windows系统默认换行是两个字符\r\n，即CRLF；；unix和linux系统的换行符只有一个字符\n，即LF。<br>此安装选项就是设置windows和unix类系统下，换行符的转换。</p></blockquote><ul><li><p>选项1 ：git check out代码下来到windows系统时，转换LF为CRLF，即转为windows换行符。当commit 操作时，转换CRLF为LF，即转为unix换行符。此选项比较推荐用于跨平台的代码情况下，在windows机器上安装git时，比如git 远程仓库的所在系统为linux系统，本地开发环境为windows时。用此项。</p></li><li><p>选项2 ：check out时，不进行转换，只有commit时，才转换CRLF 为LF，此项用于跨平台时，linux和unix环境机器上安装git时，选用些项。</p></li><li><p>选项3 ：check out 和  commit时都不进行转换，这种只能用于相同平台下的开发。不建议用在跨平台的代码系统中。</p></li></ul><hr><p><img src="/images/2017-09-12/git-3.jpg" alt="Git安装过程-图3"> 图-2.3 </p><p><img src="/images/2017-09-12/git-4.jpg" alt="Git安装过程-图3"> 图-2.4</p><ul><li><p>选项1 ：Git Bash命令在MinTTY中进行操作，也可以在windows命令行操作。（图-2.4即为安装好后，MinTTY，分为shell和gui两种界面。如果安装了TortoiseGit，这个基本就不需要用了，但是还是建议安装这个选项）</p></li><li><p>选项2 ：只使用windows命令行操作。</p></li></ul><hr><p>其他安装都用默认即可。</p><h4 id="2-安装TortoiseGit"><a href="#2-安装TortoiseGit" class="headerlink" title="2. 安装TortoiseGit"></a>2. 安装TortoiseGit</h4><p>安装TortoiseGit比较简单，只需要按默认安装即可。安装路径可自己修改。</p><hr><h2 id="三-TortoiseGit-使用"><a href="#三-TortoiseGit-使用" class="headerlink" title="三. TortoiseGit 使用"></a>三. TortoiseGit 使用</h2><p>着重讲述TortoiseGit 界面操作的使用。</p><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h3><p>创建仓库有两种方式。一种是在本地创建，然后push到远程地址。另一种是在远程创建好仓库后，clone仓库到本地。</p><h5 id="远程创建，pull到本地"><a href="#远程创建，pull到本地" class="headerlink" title="远程创建，pull到本地"></a>远程创建，pull到本地</h5><ul><li><strong>在远程创建仓库后或者直接取已经创建好的远程仓库链接，git    clone到本地文件夹。</strong></li></ul><p>以GitHub 为例：登录github帐号后，new repository,新建一个仓库。然后复制连接（比如：<a href="https://github.com/abuzhi/rdb-to-hbase.git%EF%BC%89%EF%BC%8C">https://github.com/abuzhi/rdb-to-hbase.git），</a><br>在windows本地机上打开一个文件夹，空白处右击鼠标，选择git clone：（图-2.5）</p><figure class="half">    <img src="/images/2017-09-12/git-5.jpg">    <img src="/images/2017-09-12/git-6.jpg"></figure><p>图-2.6默认点ok即可下载远程仓库代码到本地文件夹。下载完成后，本地文件夹如图：（图-2.7）</p><p><img src="/images/2017-09-12/git-7.jpg" alt="Git安装过程-图7"> 图-2.7</p><p>其中.git 文件夹默认是隐藏文件，需要开启windows显示隐藏文件功能才能查看。（笔者这里是开了的）</p><p>其他打了对勾的文件就是受git版本控制中的文件。</p><h5 id="本地创建，push到远程"><a href="#本地创建，push到远程" class="headerlink" title="本地创建，push到远程"></a>本地创建，push到远程</h5><ul><li><strong>在本地创建文件夹和仓库，git  push到远程库。</strong></li></ul><p>有一种情形，比如我本地已经在开发某个项目了，开发了一部分后，我想把这个放入git，让其他人也下载下来开发。这时，需要首先在远程仓库先创建一个空的repostory。</p><p>依然以github为例：</p><p>在github登录自己帐号，创建一个空的仓库（图-2.8）</p><p><img src="/images/2017-09-12/git-8.jpg" alt="Git安装过程-图8"></p><p>把本地开发目录加入git</p><p>比如我在本地的开发目录是这样的（图-2-9），我需要把这个test-git123目录push到远程上面建立的仓库中。</p><p><img src="/images/2017-09-12/git-9.jpg" alt="Git安装过程-图9"></p><p>操作如下：先在文件夹空白处右击，选create repostory here…，弹框点ok，在此处建立仓库。这里建立的是本地仓库，除了不能push代码到远程，其他相关的git操作和版本控制都可以正常进行。</p><p><img src="/images/2017-09-12/git-10.jpg" alt="Git安装过程-图10"></p><p>创建成功后，就有了.git文件夹，还有其他文件会多了问号标志。这个是什么含义？下面会分节来介绍相关图标的含义。现在暂时不管，你只需要知道这些带问号图标的文件，是属于被git识别，但是还未加入版本控制内的文件。如图-2.11</p><p><img src="/images/2017-09-12/git-11.jpg" alt="Git安装过程-图11"></p><p>创建本地库成功后，把本文件夹内除去.git文件夹之外的文件，都加入到git版本控制中。<br>如图-2.12，选择要加入版本控制的文件，右击，按图选择加入。弹框后，如图-2.13，select all或者按自己需要选择要加入的文件。</p><p><img src="/images/2017-09-12/git-12.jpg" alt="Git安装过程-图11"></p><p><img src="/images/2017-09-12/git-13.jpg" alt="Git安装过程-图11"></p><p>上面文件加入完成后，再空白处右击，commit -&gt; master （图-2.15）,弹出提交框后，要写入本次提交修改的注释，这个最好还是写明每次提交都有那些改进，方便开发和版本回滚（图-2.16）。</p><p><img src="/images/2017-09-12/git-15.jpg" alt="Git安装过程-图15"><br><img src="/images/2017-09-12/git-16.jpg" alt="Git安装过程-图15"></p><h3 id="2-版本控制流程"><a href="#2-版本控制流程" class="headerlink" title="2.版本控制流程"></a>2.版本控制流程</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>版本控制</tag>
      
      <tag>Git</tag>
      
      <tag>TortoiseGit</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收藏的优质Blog</title>
    <link href="/2017/05/18/2017-10-24-blogs/"/>
    <url>/2017/05/18/2017-10-24-blogs/</url>
    
    <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h2 id="Java-博客"><a href="#Java-博客" class="headerlink" title="Java 博客"></a>Java 博客</h2><ol><li><p><a href="http://www.cnblogs.com/luxiaoxun/">http://www.cnblogs.com/luxiaoxun/</a></p></li><li><p><a href="http://blog.csdn.net/column/details/javarestarting.html">http://blog.csdn.net/column/details/javarestarting.html</a></p></li><li><p><a href="http://www.cnblogs.com/xrq730/category/733883.html">http://www.cnblogs.com/xrq730/category/733883.html</a></p></li><li><p><a href="http://blog.csdn.net/liweisnake/article/category/1619757">http://blog.csdn.net/liweisnake/article/category/1619757</a></p></li><li><p><a href="http://www.cnblogs.com/java-my-life/">http://www.cnblogs.com/java-my-life/</a></p></li><li><p><a href="http://blog.csdn.net/u013256816">http://blog.csdn.net/u013256816</a></p></li><li><p><a href="https://monkeysayhi.github.io/">https://monkeysayhi.github.io/</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

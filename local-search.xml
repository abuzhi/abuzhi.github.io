<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring启动初始化及关闭前执行方法探究</title>
    <link href="/2023/05/01/2023-05-01-spring-boot-start-stop-prepare-method/"/>
    <url>/2023/05/01/2023-05-01-spring-boot-start-stop-prepare-method/</url>
    
    <content type="html"><![CDATA[<p>Spring启动初始化及关闭前执行方法探究</p><p><img src="/images/2023-05-01/ApplicationEvent.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目中有用到spring boot及web，在初始化执行方法时，遇到了重复执行的问题。</p><p>为查找原因，现对spring启动及关闭相关流程进行简单探究，主要针对spring 容器启动完成后，想预期执行某些初始化方法的执行，及关闭前执行方法。</p><p>另外需要深入理清Listener模式下的各Event事件触发的顺序及情景。</p><p>新建spring boot web项目，加入常用的一些初始化方法及关闭前方法。</p><p>项目结构</p><p><img src="/images/2023-05-01/project.png"></p><p>主方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(WebStarter.class, args);<br>        System.out.println(<span class="hljs-string">&quot;context 启动成功&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        SpringApplication.exit(context, (ExitCodeGenerator) () -&gt; <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *  hook要加在代码最后才能执行</span><br><span class="hljs-comment">         */</span><br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                ClosePreHook.close();<br>            &#125;<br>        &#125;));<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="Spring启动初始化方法"><a href="#Spring启动初始化方法" class="headerlink" title="Spring启动初始化方法"></a>Spring启动初始化方法</h1><p>spring启动后加载方式一般有如下几种</p><p>另外，spring如果用的xml方式声明bean，也可以在xml中进行init ，pre destroy等配置，这里暂不讨论。</p><h2 id="CommandLineRunner-接口"><a href="#CommandLineRunner-接口" class="headerlink" title="CommandLineRunner 接口"></a>CommandLineRunner 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppInitA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(System.currentTimeMillis() + <span class="hljs-string">&quot; init CommandLineRunner : args=&quot;</span> + args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ApplicationRunner-接口"><a href="#ApplicationRunner-接口" class="headerlink" title="ApplicationRunner 接口"></a>ApplicationRunner 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppInitB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationRunner</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(System.currentTimeMillis() + <span class="hljs-string">&quot; init ApplicationRunner : args=&quot;</span> + args.getSourceArgs());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ApplicationListener-接口"><a href="#ApplicationListener-接口" class="headerlink" title="ApplicationListener 接口"></a>ApplicationListener 接口</h2><p>此接口为事件驱动的，对应的event有很多种，不同的event对应事件不一样，如果不清楚对应触发时刻就很可能踩坑<br>一般用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppInitC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ContextRefreshedEvent event)</span> &#123;<br>        System.out.println(System.currentTimeMillis() + <span class="hljs-string">&quot; init ApplicationListener  ContextRefreshedEvent : event=&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="InitializingBean接口"><a href="#InitializingBean接口" class="headerlink" title="InitializingBean接口"></a>InitializingBean接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitInitializingBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">3000</span>);<br>        log.info(<span class="hljs-string">&quot; init &quot;</span> + <span class="hljs-built_in">this</span>.getClass().getSimpleName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PostConstruct注解"><a href="#PostConstruct注解" class="headerlink" title="PostConstruct注解"></a>PostConstruct注解</h2><p>注解也可以，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitPostConstruct</span> &#123;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot; init &quot;</span> + <span class="hljs-built_in">this</span>.getClass().getSimpleName());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring关闭前执行方法"><a href="#Spring关闭前执行方法" class="headerlink" title="Spring关闭前执行方法"></a>Spring关闭前执行方法</h1><p>目前发现有三种方式：</p><h2 id="PreDestroy注解"><a href="#PreDestroy注解" class="headerlink" title="@PreDestroy注解"></a>@PreDestroy注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosePreDestroy</span> &#123;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot; close PreDestroy&quot;</span> + <span class="hljs-built_in">this</span>.getClass().getSimpleName());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jvm的addShutdownHook"><a href="#jvm的addShutdownHook" class="headerlink" title="jvm的addShutdownHook"></a>jvm的addShutdownHook</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosePreHook</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot; close ClosePreHook&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 主main中加入：</span><br><br>        Runtime.getRuntime().addShutdownHook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                ClosePreHook.close();<br>            &#125;<br>        &#125;));<br></code></pre></td></tr></table></figure><h2 id="ApplicationListener-接口-1"><a href="#ApplicationListener-接口-1" class="headerlink" title="ApplicationListener 接口"></a>ApplicationListener 接口</h2><p>目前发现只有两个接口是纯关闭前执行的：ExitCodeEvent（必须exit code非0才可以调用到），ContextClosedEvent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloseListenerExitCodeEvent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ExitCodeEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ExitCodeEvent event)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot; close &quot;</span> + <span class="hljs-built_in">this</span>.getClass().getSimpleName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="启动加载及关闭的执行顺序"><a href="#启动加载及关闭的执行顺序" class="headerlink" title="启动加载及关闭的执行顺序"></a>启动加载及关闭的执行顺序</h1><p>写一个web demo，加入各不同的方式，每个方法执行3s，观察输出</p><p>输出日志简略如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell">2023-05-05 19:41:07.840 default [main] INFO  com.xiao.demo.boot.WebStarter[640] - The following 1 profile is active: &quot;dev&quot;<br>2023-05-05 19:41:08.570 default [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer[108] - Tomcat initialized with port(s): 18080 (http)<br>2023-05-05 19:41:08.575 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Initializing ProtocolHandler [&quot;http-nio-18080&quot;]<br>2023-05-05 19:41:08.576 default [main] INFO  o.a.catalina.core.StandardService[173] - Starting service [Tomcat]<br>2023-05-05 19:41:08.576 default [main] INFO  o.a.catalina.core.StandardEngine[173] - Starting Servlet engine: [Apache Tomcat/9.0.65]<br>2023-05-05 19:41:08.645 default [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/][173] - Initializing Spring embedded WebApplicationContext<br>2023-05-05 19:41:08.645 default [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext[292] - Root WebApplicationContext: initialization completed in 779 ms<br>2023-05-05 19:41:11.884 default [main] INFO  c.x.d.boot.init.InitInitializingBean[13] -  init InitInitializingBean<br>2023-05-05 19:41:14.893 default [main] INFO  c.x.demo.boot.init.InitPostConstruct[20] -  init PostConstructInitPostConstruct<br>2023-05-05 19:41:17.908 default [main] INFO  c.x.demo.boot.init.InitPostConstruct[30] -  init afterPropertiesSetInitPostConstruct<br>2023-05-05 19:41:18.202 default [main] INFO  o.s.b.a.e.web.EndpointLinksResolver[58] - Exposing 5 endpoint(s) beneath base path &#x27;&#x27;<br>2023-05-05 19:41:18.221 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Starting ProtocolHandler [&quot;http-nio-18080&quot;]<br>2023-05-05 19:41:18.232 default [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer[220] - Tomcat started on port(s): 18080 (http) with context path &#x27;&#x27;<br>2023-05-05 19:41:21.236 default [main] INFO  c.x.d.b.i.InitListenerServletWebServerInitializedEvent[20] -  init InitListenerServletWebServerInitializedEvent<br>2023-05-05 19:41:24.246 default [main] INFO  c.x.d.b.i.InitListenerWebServerInitializedEvent[19] -  init InitListenerWebServerInitializedEvent<br>2023-05-05 19:41:27.278 default [main] INFO  c.x.d.b.i.InitListenerApplicationContextEvent[19] -  init InitListenerApplicationContextEvent<br>2023-05-05 19:41:30.287 default [main] INFO  c.x.d.b.i.InitListenerContextRefreshedEvent[19] -  init InitListenerContextRefreshedEvent<br>2023-05-05 19:41:30.295 default [main] INFO  com.xiao.demo.boot.WebStarter[61] - Started WebStarter in 22.662 seconds (JVM running for 23.489)<br>2023-05-05 19:41:33.299 default [main] INFO  c.x.d.b.i.InitListenerApplicationStartedEvent[19] -  init InitListenerApplicationStartedEvent<br>2023-05-05 19:41:36.300 default [main] INFO  c.x.d.b.i.InitListenerSpringApplicationEvent[20] -  init InitListenerSpringApplicationEvent<br>2023-05-05 19:41:39.324 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-05 19:41:42.328 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>2023-05-05 19:41:45.339 default [main] INFO  c.x.d.b.init.InitApplicationRunner[14] -  init InitApplicationRunner<br>2023-05-05 19:41:48.346 default [main] INFO  c.x.d.b.init.InitCommandLineRunner[13] -  init InitCommandLineRunner<br>2023-05-05 19:41:49.026 default [RMI TCP Connection(5)-192.168.137.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/][173] - Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;<br>2023-05-05 19:41:49.026 default [RMI TCP Connection(5)-192.168.137.1] INFO  o.s.web.servlet.DispatcherServlet[525] - Initializing Servlet &#x27;dispatcherServlet&#x27;<br>2023-05-05 19:41:49.027 default [RMI TCP Connection(5)-192.168.137.1] INFO  o.s.web.servlet.DispatcherServlet[547] - Completed initialization in 1 ms<br>2023-05-05 19:41:49.028 default [RMI TCP Connection(4)-192.168.137.1] INFO  com.zaxxer.hikari.HikariDataSource[110] - HikariPool-1 - Starting...<br>2023-05-05 19:41:49.178 default [RMI TCP Connection(4)-192.168.137.1] INFO  com.zaxxer.hikari.HikariDataSource[123] - HikariPool-1 - Start completed.<br>2023-05-05 19:41:51.347 default [main] INFO  c.x.d.b.i.InitListenerApplicationReadyEvent[19] -  init InitListenerApplicationReadyEvent<br>2023-05-05 19:41:54.361 default [main] INFO  c.x.d.b.i.InitListenerSpringApplicationEvent[20] -  init InitListenerSpringApplicationEvent<br>2023-05-05 19:41:57.366 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-05 19:42:00.380 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>context 启动成功<br>2023-05-05 19:42:17.964 default [main] INFO  c.x.d.b.i.CloseListenerExitCodeEvent[20] -  close CloseListenerExitCodeEvent<br>2023-05-05 19:42:27.394 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-05 19:42:30.397 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>2023-05-05 19:42:33.403 default [main] INFO  c.x.d.b.i.CloseListenerContextClosedEvent[20] -  close CloseListenerContextClosedEvent<br>2023-05-05 19:42:36.419 default [main] INFO  c.x.d.b.i.InitListenerApplicationContextEvent[19] -  init InitListenerApplicationContextEvent<br>2023-05-05 19:42:36.685 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Pausing ProtocolHandler [&quot;http-nio-18080&quot;]<br>2023-05-05 19:42:36.686 default [main] INFO  o.a.catalina.core.StandardService[173] - Stopping service [Tomcat]<br>2023-05-05 19:42:36.689 default [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/][173] - Destroying Spring FrameworkServlet &#x27;dispatcherServlet&#x27;<br>2023-05-05 19:42:36.698 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Stopping ProtocolHandler [&quot;http-nio-18080&quot;]<br>2023-05-05 19:42:36.701 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Destroying ProtocolHandler [&quot;http-nio-18080&quot;]<br>2023-05-05 19:42:39.725 default [main] INFO  c.x.demo.boot.init.ClosePreDestroy[21] -  close PreDestroyClosePreDestroy<br>2023-05-05 19:42:39.750 default [main] INFO  com.zaxxer.hikari.HikariDataSource[350] - HikariPool-1 - Shutdown initiated...<br>2023-05-05 19:42:39.767 default [main] INFO  com.zaxxer.hikari.HikariDataSource[352] - HikariPool-1 - Shutdown completed.<br>Disconnected from the target VM, address: &#x27;127.0.0.1:7070&#x27;, transport: &#x27;socket&#x27;<br><br></code></pre></td></tr></table></figure><p>通过日志观察各初始化方式的顺序，有这么几个阶段：</p><ul><li><strong>1.tomcat启动，初始化bean及注解优先，可见InitializingBean和PostConstruct是最先开始初始化的</strong></li><li><strong>2.ApplicationRunner和CommandLineRunner接口基本同时初始化</strong></li><li><strong>3.Listener接口的实现中，根据不同的类型，会有对应的容器启动中，启动后，关闭前等各种情况的触发，所以Listener接口的实现中，加载时间会比较复杂，需要明白各event的明确含义再进行使用。</strong></li><li><strong>4.event类中，有一些事件是会在整个容器周期内有多次触发的，如：PayloadApplicationEvent</strong></li></ul><h1 id="探究源码"><a href="#探究源码" class="headerlink" title="探究源码"></a>探究源码</h1><p>要搞清楚各触发阶段，需要跟进源码中观察，后再根据源码流程，梳理出event事件的顺序</p><h2 id="启动初始化及关闭流程源码执行"><a href="#启动初始化及关闭流程源码执行" class="headerlink" title="启动初始化及关闭流程源码执行"></a>启动初始化及关闭流程源码执行</h2><p>源码太多，跟进后，画了一个时序图，可以直观明了的看到各加载时间顺序。</p><p>这里只重点标明各初始化及关闭前的各方法触发节点，不对spring加载过程做细说，如想了解可参考其他博客文章</p><p><strong>主要代码在SpringApplication.run和AbstractApplicationContext.refresh两个方法中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SpringApplication.run</span><br><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>configureHeadlessProperty();<br><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br>listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>configureIgnoreBeanInfo(environment);<br><span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>context = createApplicationContext();<br>context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>            <span class="hljs-comment">/** 步骤1，2，3，4 **/</span><br>refreshContext(context);<br>afterRefresh(context, applicationArguments);<br><span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToStartup</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);<br>&#125;<br>            <span class="hljs-comment">/** 步骤5 **/</span><br>listeners.started(context, timeTakenToStartup);<br>            <span class="hljs-comment">/** 步骤5 **/</span><br>callRunners(context, applicationArguments);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, listeners);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToReady</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br>listeners.ready(context, timeTakenToReady);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br><br>    <span class="hljs-comment">// AbstractApplicationContext.refresh</span><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">contextRefresh</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br>prepareRefresh();<br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br>prepareBeanFactory(beanFactory);<br><span class="hljs-keyword">try</span> &#123;<br>postProcessBeanFactory(beanFactory);<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanPostProcess</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br>invokeBeanFactoryPostProcessors(beanFactory);<br>registerBeanPostProcessors(beanFactory);<br>beanPostProcess.end();<br>initMessageSource();<br>initApplicationEventMulticaster();<br>            <br>onRefresh();<br>registerListeners();<br>                <span class="hljs-comment">/** 步骤1，2 **/</span><br>finishBeanFactoryInitialization(beanFactory);<br>                <span class="hljs-comment">/** 步骤3，4 **/</span><br>finishRefresh();<br>&#125;<br>....<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>过程如下：</strong></p><p><img src="/images/2023-05-01/spring-boot-start.png"></p><h2 id="步骤1和2，InitializingBean和PostConstruct"><a href="#步骤1和2，InitializingBean和PostConstruct" class="headerlink" title="步骤1和2，InitializingBean和PostConstruct"></a>步骤1和2，InitializingBean和PostConstruct</h2><p>在AbstractApplicationContext 中的finishBeanFactoryInitialization方法中完成的，是在各bean完成初始化后，执行init method时执行的。</p><p>这两个属于同级别的执行，执行顺序上以源码顺序为主，</p><p>所以，如果在同一个类中即实现了InitializingBean接口，同时也加入了PostConstruct注解，如：</p><p><img src="/images/2023-05-01/InitializingBean.png"></p><p>实际执行中，此类下PostConstruct优先于afterPropertiesSet执行，这里需要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitPostConstruct</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot; init PostConstruct&quot;</span> + <span class="hljs-built_in">this</span>.getClass().getSimpleName());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.info(<span class="hljs-string">&quot; init afterPropertiesSet&quot;</span> + <span class="hljs-built_in">this</span>.getClass().getSimpleName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤3，ServletWebServerInitializedEvent"><a href="#步骤3，ServletWebServerInitializedEvent" class="headerlink" title="步骤3，ServletWebServerInitializedEvent"></a>步骤3，ServletWebServerInitializedEvent</h2><p>spring getLifecycleProcessor().onRefresh() 加载各bean完成，web容器初始化成功后，</p><p>WebServerStartStopLifecycle触发ServletWebServerInitializedEvent事件，</p><p>由于ServletWebServerInitializedEvent是继承自WebServerInitializedEvent，所以此事件也会触发。</p><p>这里实际会触发两个event：ServletWebServerInitializedEvent , WebServerInitializedEvent</p><p>步骤4，ContextRefreshedEvent<br>执行完refresh最后，直接触发ContextRefreshedEvent事件，<br>ContextRefreshedEvent的父类ApplicationContextEvent也同时会触发一次<br>本调用也是触发了两个事件：ContextRefreshedEvent，ApplicationContextEvent<br>执行完后，SpringApplication run中的afterRefresh执行结束</p><p>步骤5，listeners.started 相关事件<br>这里触发的是spring start启动完成后的event事件：<br>ApplicationStartedEvent及其父类SpringApplicationEvent;<br>AvailabilityChangeEvent及其父类PayloadApplicationEvent;</p><p>步骤6，callRunners<br>这里触发两个runner：ApplicationRunner，CommandLineRunner<br>同级执行</p><p>步骤7，listeners.ready 相关事件<br>spring web启动完成后触发的事件，<br>ApplicationReadyEvent及其父类SpringApplicationEvent；<br>AvailabilityChangeEvent及其父类PayloadApplicationEvent；</p><p>步骤8，exit<br>ExitCodeEvent 触发：当SpringApplication.exit(context, (ExitCodeGenerator) () -&gt; 1); exit code为非0时触发</p><p>步骤9，ContextClosedEvent<br>触发spring close event事件：<br>AvailabilityChangeEvent及其父类PayloadApplicationEvent；<br>ContextClosedEvent及其父类ApplicationContextEvent；</p><p>步骤10和11，最后处理<br>步骤10先调用bean的@PreDestroy 注解的方法<br>步骤11，spring关闭后，jvm触发shutdown hook：<br>Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {<br>    @Override<br>    public void run() {<br>        ClosePreHook.close();<br>    }<br>}));</p><p>梳理Listener模式下的各Event<br>在springboot及web开发中，常用主要的几个event类在下面几个包中，这里不讨论spring data，spring cloud相关的event，大体上是一样的<br>org.springframework.context.event<br>org.springframework.boot.context.event<br>org.springframework.boot.web.context<br>基础类都继承自 org.springframework.context.ApplicationEvent<br>关系如下图，这里有spring boot下的7个，context下4个，web下3个，另有几个单独的，如果再加入spring data，cloud，jpa等相关的就很多了，这里只讨论基础常用的下图中这些</p><p>先搞清楚各event事件的类关系，各event类顶层是ApplicationEvent抽象类，子类有五个常用<br>ApplicationEvent</p><ul><li>ApplicationContextEvent</li><li>ExitCodeEvent</li><li>PayloadApplicationEvent</li><li>WebServerInitializedEvent</li><li>SpringApplicationEvent</li></ul><p>其中需要注意的是几个容易重复触发的事件：<br>SpringApplicationEvent，PayloadApplicationEvent，ApplicationContextEvent<br>这三个类调用基本是由于子类触发的，如果同一个项目中，如果有同时声明父类和子类的触发，则很容易触发父类的方法两次，所以谨慎使用上面三个事件，子类也在不同情况下会有可能触发两次<br>所以，按需求，在不同的阶段进行调用。推荐最好都不用event进行初始化或者关闭前执行方法</p><p>加入apm后event加载两次问题<br>项目中出现问题是主程序引入了apm agent后，有两次触发的情况，对上面demo代码加入apm 配置：<br>application.metrics.name&#x3D;<a href="mailto:&#x62;&#x6f;&#111;&#x74;&#95;&#x77;&#x65;&#x62;&#x5f;&#x40;&#115;&#112;&#x72;&#x69;&#x6e;&#103;&#x2e;&#x70;&#114;&#111;&#102;&#105;&#x6c;&#101;&#115;&#46;&#97;&#x63;&#x74;&#x69;&#x76;&#x65;">&#x62;&#x6f;&#111;&#x74;&#95;&#x77;&#x65;&#x62;&#x5f;&#x40;&#115;&#112;&#x72;&#x69;&#x6e;&#103;&#x2e;&#x70;&#114;&#111;&#102;&#105;&#x6c;&#101;&#115;&#46;&#97;&#x63;&#x74;&#x69;&#x76;&#x65;</a>@<br>management.endpoints.web.base-path&#x3D;&#x2F;<br>management.endpoints.web.exposure.include&#x3D;prometheus,health,info,metrics,env<br>management.server.port&#x3D;12345<br>启动后，执行相同的代码，日志输出如下：<br>2023-05-06 16:28:21.138 default [main] INFO  com.xiao.demo.boot.WebStarter[640] - The following 1 profile is active: “dev”<br>2023-05-06 16:28:21.836 default [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer[108] - Tomcat initialized with port(s): 18080 (http)<br>2023-05-06 16:28:21.842 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Initializing ProtocolHandler [“http-nio-18080”]<br>2023-05-06 16:28:21.842 default [main] INFO  o.a.catalina.core.StandardService[173] - Starting service [Tomcat]<br>2023-05-06 16:28:21.842 default [main] INFO  o.a.catalina.core.StandardEngine[173] - Starting Servlet engine: [Apache Tomcat&#x2F;9.0.65]<br>2023-05-06 16:28:21.912 default [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[&#x2F;][173] - Initializing Spring embedded WebApplicationContext<br>2023-05-06 16:28:21.913 default [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext[292] - Root WebApplicationContext: initialization completed in 747 ms<br>2023-05-06 16:28:25.128 default [main] INFO  c.x.d.boot.init.InitInitializingBean[13] -  init InitInitializingBean<br>2023-05-06 16:28:28.148 default [main] INFO  c.x.demo.boot.init.InitPostConstruct[20] -  init PostConstructInitPostConstruct<br>2023-05-06 16:28:31.157 default [main] INFO  c.x.demo.boot.init.InitPostConstruct[30] -  init afterPropertiesSetInitPostConstruct<br>2023-05-06 16:28:44.773 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Starting ProtocolHandler [“http-nio-18080”]<br>2023-05-06 16:28:44.787 default [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer[220] - Tomcat started on port(s): 18080 (http) with context path ‘’<br>2023-05-06 16:28:52.083 default [main] INFO  c.x.d.b.i.InitListenerServletWebServerInitializedEvent[20] -  init InitListenerServletWebServerInitializedEvent<br>2023-05-06 16:28:55.091 default [main] INFO  c.x.d.b.i.InitListenerWebServerInitializedEvent[19] -  init InitListenerWebServerInitializedEvent<br>2023-05-06 16:28:55.143 default [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer[108] - Tomcat initialized with port(s): 12345 (http)<br>2023-05-06 16:28:55.144 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Initializing ProtocolHandler [“http-nio-12345”]<br>2023-05-06 16:28:55.144 default [main] INFO  o.a.catalina.core.StandardService[173] - Starting service [Tomcat]<br>2023-05-06 16:28:55.144 default [main] INFO  o.a.catalina.core.StandardEngine[173] - Starting Servlet engine: [Apache Tomcat&#x2F;9.0.65]<br>2023-05-06 16:28:55.152 default [main] INFO  o.a.c.c.C.[Tomcat-1].[localhost].[&#x2F;][173] - Initializing Spring embedded WebApplicationContext<br>2023-05-06 16:28:55.152 default [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext[292] - Root WebApplicationContext: initialization completed in 56 ms<br>2023-05-06 16:28:55.159 default [main] INFO  o.s.b.a.e.web.EndpointLinksResolver[58] - Exposing 5 endpoint(s) beneath base path ‘’<br>2023-05-06 16:29:03.805 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Starting ProtocolHandler [“http-nio-12345”]<br>2023-05-06 16:29:03.809 default [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer[220] - Tomcat started on port(s): 12345 (http) with context path ‘’<br>2023-05-06 16:29:06.819 default [main] INFO  c.x.d.b.i.InitListenerServletWebServerInitializedEvent[20] -  init InitListenerServletWebServerInitializedEvent<br>2023-05-06 16:29:09.830 default [main] INFO  c.x.d.b.i.InitListenerWebServerInitializedEvent[19] -  init InitListenerWebServerInitializedEvent<br>2023-05-06 16:29:16.630 default [main] INFO  c.x.d.b.i.InitListenerApplicationContextEvent[19] -  init InitListenerApplicationContextEvent<br>2023-05-06 16:29:19.642 default [main] INFO  c.x.d.b.i.InitListenerContextRefreshedEvent[19] -  init InitListenerContextRefreshedEvent<br>2023-05-06 16:29:53.836 default [main] INFO  c.x.d.b.i.InitListenerApplicationContextEvent[19] -  init InitListenerApplicationContextEvent<br>2023-05-06 16:29:56.843 default [main] INFO  c.x.d.b.i.InitListenerContextRefreshedEvent[19] -  init InitListenerContextRefreshedEvent<br>2023-05-06 16:29:56.849 default [main] INFO  com.xiao.demo.boot.WebStarter[61] - Started WebStarter in 95.942 seconds (JVM running for 96.735)<br>2023-05-06 16:29:59.862 default [main] INFO  c.x.d.b.i.InitListenerApplicationStartedEvent[19] -  init InitListenerApplicationStartedEvent<br>2023-05-06 16:30:02.877 default [main] INFO  c.x.d.b.i.InitListenerSpringApplicationEvent[20] -  init InitListenerSpringApplicationEvent<br>2023-05-06 16:30:05.887 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-06 16:30:08.895 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>2023-05-06 16:30:11.907 default [main] INFO  c.x.d.b.init.InitApplicationRunner[14] -  init InitApplicationRunner<br>2023-05-06 16:30:14.920 default [main] INFO  c.x.d.b.init.InitCommandLineRunner[13] -  init InitCommandLineRunner<br>2023-05-06 16:30:15.412 default [RMI TCP Connection(5)-192.168.137.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[&#x2F;][173] - Initializing Spring DispatcherServlet ‘dispatcherServlet’<br>2023-05-06 16:30:15.413 default [RMI TCP Connection(5)-192.168.137.1] INFO  o.s.web.servlet.DispatcherServlet[525] - Initializing Servlet ‘dispatcherServlet’<br>2023-05-06 16:30:15.414 default [RMI TCP Connection(5)-192.168.137.1] INFO  o.s.web.servlet.DispatcherServlet[547] - Completed initialization in 1 ms<br>2023-05-06 16:30:15.415 default [RMI TCP Connection(4)-192.168.137.1] INFO  com.zaxxer.hikari.HikariDataSource[110] - HikariPool-1 - Starting…<br>2023-05-06 16:30:15.570 default [RMI TCP Connection(4)-192.168.137.1] INFO  com.zaxxer.hikari.HikariDataSource[123] - HikariPool-1 - Start completed.<br>2023-05-06 16:30:17.938 default [main] INFO  c.x.d.b.i.InitListenerApplicationReadyEvent[19] -  init InitListenerApplicationReadyEvent<br>2023-05-06 16:30:20.950 default [main] INFO  c.x.d.b.i.InitListenerSpringApplicationEvent[20] -  init InitListenerSpringApplicationEvent<br>2023-05-06 16:30:23.964 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-06 16:30:26.969 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>context 启动成功<br>2023-05-06 16:31:07.872 default [main] INFO  c.x.d.b.i.CloseListenerExitCodeEvent[20] -  close CloseListenerExitCodeEvent<br>2023-05-06 16:31:13.741 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-06 16:31:16.752 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>2023-05-06 16:31:19.766 default [main] INFO  c.x.d.b.i.CloseListenerContextClosedEvent[20] -  close CloseListenerContextClosedEvent<br>2023-05-06 16:31:22.777 default [main] INFO  c.x.d.b.i.InitListenerApplicationContextEvent[19] -  init InitListenerApplicationContextEvent<br>2023-05-06 16:31:25.788 default [main] INFO  c.x.d.b.i.InitListenerAvailabilityChangeEvent[20] -  init InitListenerAvailabilityChangeEvent<br>2023-05-06 16:31:28.798 default [main] INFO  c.x.d.b.i.InitListenerPayloadApplicationEvent[20] -  init InitListenerPayloadApplicationEvent<br>2023-05-06 16:31:31.810 default [main] INFO  c.x.d.b.i.CloseListenerContextClosedEvent[20] -  close CloseListenerContextClosedEvent<br>2023-05-06 16:31:34.818 default [main] INFO  c.x.d.b.i.InitListenerApplicationContextEvent[19] -  init InitListenerApplicationContextEvent<br>2023-05-06 16:31:35.084 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Pausing ProtocolHandler [“http-nio-12345”]<br>2023-05-06 16:31:35.085 default [main] INFO  o.a.catalina.core.StandardService[173] - Stopping service [Tomcat]<br>2023-05-06 16:31:35.097 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Stopping ProtocolHandler [“http-nio-12345”]<br>2023-05-06 16:31:35.101 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Destroying ProtocolHandler [“http-nio-12345”]<br>2023-05-06 16:31:41.645 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Pausing ProtocolHandler [“http-nio-18080”]<br>2023-05-06 16:31:41.646 default [main] INFO  o.a.catalina.core.StandardService[173] - Stopping service [Tomcat]<br>2023-05-06 16:31:41.646 default [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[&#x2F;][173] - Destroying Spring FrameworkServlet ‘dispatcherServlet’<br>2023-05-06 16:31:41.650 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Stopping ProtocolHandler [“http-nio-18080”]<br>2023-05-06 16:31:41.653 default [main] INFO  o.a.coyote.http11.Http11NioProtocol[173] - Destroying ProtocolHandler [“http-nio-18080”]<br>2023-05-06 16:31:46.609 default [main] INFO  c.x.demo.boot.init.ClosePreDestroy[21] -  close PreDestroyClosePreDestroy<br>2023-05-06 16:31:46.634 default [main] INFO  com.zaxxer.hikari.HikariDataSource[350] - HikariPool-1 - Shutdown initiated…<br>2023-05-06 16:31:46.651 default [main] INFO  com.zaxxer.hikari.HikariDataSource[352] - HikariPool-1 - Shutdown completed.<br>Disconnected from the target VM, address: ‘127.0.0.1:11460’, transport: ‘socket’</p><p>Process finished with exit code 0</p><p>加入apm agent后，由于启动时实际是启动了两个web server对应两个不同的web端口，一个是本应用的端口18080，另外一个为apm 收集metrics的端口12345<br>所以实际启动中，会触发两次web 初始化event，content refresh event，change event等，如果预期初始化的方法写在了用listener 实现，那么有极大可能导致方法会执行两次以上<br>本来在无apm时加载一次的event方法，在此情景下也可能加载两次。<br>所以不推荐使用event方式去进行初始化和关闭前执行<br>总结用法及注意事项<br>1.初始化加载时<br>参考上面启动及关闭的流程，可知整个过程中，有可能触发两次的是event事件中的三个SpringApplicationEvent，PayloadApplicationEvent，ApplicationContextEvent，最好不要使用<br>InitializingBean 和@PostConstruct 最早加载，推荐无动态参数启动需要的情况下，优先使用。<br>ApplicationRunner和CommandLineRunner在初始化bean及web启动后执行，可以在需要动态传入启动参数的情况下，优先使用。<br>如果确实非常有需要监听容器的启动关闭等过程，推荐使用明确的子类事件，且要确实明白每个event的加载时机。<br>最好是尽量不用event方式进行初始化,上面两个方式足够使用了。</p><p>2.关闭应用前执行<br>推荐主要还是以PreDestroy为主<br>hook方式也可以，但是写代码就多一些。<br>event close方式不推荐，有重复执行的可能</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql8.x 搭建及配置</title>
    <link href="/2022/11/01/2022-11-01-mysql-8.x-win-config/"/>
    <url>/2022/11/01/2022-11-01-mysql-8.x-win-config/</url>
    
    <content type="html"><![CDATA[<p>mysql8.x 搭建及配置</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>到mysql官网下载mysql 8.x的zip文件</p><p>下载zip包，解压到自定义目录<br>win下：找个没有空格和中文路径的目录直接解压即可</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>win下：</p><blockquote><p>MYSQL_HOME&#x3D;D:\data\mysql8<br>PATH 中加入 %MYSQL_HOME%\bin</p></blockquote><p>同理，linux中也要在环境变量中加入上面配置</p><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><p>win中，建配置文件<br>需要有几个注意的地方：</p><ol><li>datadir 对应的目录不用手动建，初始化data目录时会自动创建。自己建可能会有问题</li><li>字符集全用utf8mb4的，utf-8下，1字符&#x3D;3字节。（uft-8也称之为utf-8mb3）utf-8mb4下，1字符&#x3D;4字节。varchar的存储上限是65535字节，对存储汉字有区别</li></ol><p>mysql 配置文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">23306</span><br><span class="hljs-attr">basedir</span>=D:/data/mysql8<br><span class="hljs-attr">datadir</span>=D:/data/mysql8/data<br><span class="hljs-attr">max_connections</span>=<span class="hljs-number">2000</span><br><span class="hljs-attr">max_connect_errors</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">character-set-server</span>=utf8mb4<br><span class="hljs-attr">default-storage-engine</span>=INNODB<br><span class="hljs-attr">default_authentication_plugin</span>=mysql_native_password<br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-section">[client]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">23306</span><br><span class="hljs-attr">default-character-set</span>=utf8mb4<br><span class="hljs-section">[mysqladmin]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqlcheck]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqldump]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqlimport]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><span class="hljs-section">[mysqlshow]</span><br><span class="hljs-attr">default-character-set</span> = utf8mb4<br><br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>cd 到 mysql 文件夹的 bin 目录下，执行如下初始化命令：<br>mysqld –initialize  –console 随机密码<br>mysqld –initialize-insecure –console 无密码模式</p><p>mysqld –console 命令行启动服务</p><p>win下安装mysql服务<br>mysqld –install<br>启动：net start mysql</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>console登录mysql，或者使用mysql连接工具，连接到db后，修改密码</p><p>set password for root@localhost&#x3D;’12345678’;</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序Log框架梳理及冲突解决</title>
    <link href="/2021/08/01/2021-08-01-java-log-frameworks/"/>
    <url>/2021/08/01/2021-08-01-java-log-frameworks/</url>
    
    <content type="html"><![CDATA[<p>Java程序Log框架梳理及冲突解决</p><p><img src="/images/2021-08-01/image2021-3-10_18_52_25.png"></p><h2 id="一、Log框架简介"><a href="#一、Log框架简介" class="headerlink" title="一、Log框架简介"></a>一、Log框架简介</h2><p>java的log框架分为两类：</p><p>记录型日志框架: 具体实现log功能的框架，也就是代码运行时，真正append log数据的框架，目前有四个</p><p>Log4j  ： 最初的log框架<br>J.U.L ：jdk自带的log类，(java.util.logging) 也常称为JDKLog、jdk-logging，自Java1.4以来的官方日志实现。<br>Log4j2-core ：log4j的升级版，有很多<br>Logback：log4j2诞生前做的相对log4j的大优化框架，性能比log4j高很多，与log4j2差不多</p><p>门面型日志框架:  为了能在大项目中，合并各log实现框架的冲突问题，开发出的桥接类型的日志框架，里面无具体日志append实现，只有接口。即面向接口编程的框架，目前有两个：</p><p>SLF4J：用的比较多的桥接日志框架，桥类比较多，也是比较头疼的一个,全称Simple Logging Facade for Java。官网 <a href="http://www.slf4j.org/">http://www.slf4j.org/</a><br>J.C.L：在slf4j诞生前，apache开发的桥类，以前叫 (Jakarta Commons Logging)，也叫 Apache Common logging，现在叫 (commons-logging)<br>Log4j-api: Log4j 2.x 后，将log4j的接口独立的包</p><h2 id="二、Log框架的演化"><a href="#二、Log框架的演化" class="headerlink" title="二、Log框架的演化"></a>二、Log框架的演化</h2><p>要明白log框架目前的混乱问题，我们得先理一下其发展过程，整明白各日志框架间的关系</p><p><img src="/images/2021-08-01/image2021-3-10_18_52_25.png"></p><h3 id="2-1-蛮荒时代：System-out和System-err"><a href="#2-1-蛮荒时代：System-out和System-err" class="headerlink" title="2.1 蛮荒时代：System.out和System.err"></a>2.1 蛮荒时代：System.out和System.err</h3><p>在java 1.4之前，java自己没有自带的log实现，所有的日志统计都是以System.out和System.err进行输出的。麻烦，不可配置，不灵活。</p><p>此时间应该是在jdk1.4发布之前的情况，时间上应该是2002年之前</p><h3 id="2-2-最初统一：log4j-的诞生"><a href="#2-2-最初统一：log4j-的诞生" class="headerlink" title="2.2 最初统一：log4j 的诞生"></a>2.2 最初统一：log4j 的诞生</h3><p>在1996年初，E.U.SEMPER（欧洲安全电子市场）项目决定编写自己的跟踪API，最后该API演变为Log4j，Log4j日志软件包一经推出就备受欢迎，这里有一个主要贡献者：Ceki Gülcü，记住这个人，一切才刚刚开始。。。</p><p>后来Log4j成为了Apache基金会项目中的一员，同时Log4j的火爆，让Log4j一度成为业内日志标杆。（据说Apache基金会还曾经建议Sun引入Log4j到java的标准库中，但是sun拒绝了）</p><p>此日志一直在大规模使用，目前也还有好多框架是用的这个，虽然Log4j项目已经在2015年 End Of Life了。。但是，挡不住一直有人用哇。。。</p><p><img src="/images/2021-08-01/image2021-3-10_18_27_25.png"> </p><h3 id="2-3-Java跟风：JUL（java-util-logging）发布"><a href="#2-3-Java跟风：JUL（java-util-logging）发布" class="headerlink" title="2.3 Java跟风：JUL（java.util.logging）发布"></a>2.3 Java跟风：JUL（java.util.logging）发布</h3><p>Sun没有直接将log4j放入jdk组件中，而是自己仿照log4j 实现了一套自己的日志库，即java.util.logging。。。</p><p>从2002年2月发布jdk1.4开始，java中就自带有自己的log框架了。</p><p>真的是仿照（或许叫抄袭？），毕竟log4j流行那么久了。但是使用起来，还是没有log4j好用。</p><p>这就尴尬了，自带的不行，但是起码有人在用。</p><h3 id="2-4-混乱初阶：JCL-（Jakarta-Commons-Logging）发布"><a href="#2-4-混乱初阶：JCL-（Jakarta-Commons-Logging）发布" class="headerlink" title="2.4 混乱初阶：JCL （Jakarta Commons Logging）发布"></a>2.4 混乱初阶：JCL （Jakarta Commons Logging）发布</h3><p>Sun自带了jul日志，之前的log4j还归属于apache，这里就有问题了，用户开发程序引入不同的日志类型时，就容易冲突或者导致打日志混乱的问题。所以apache推出了第一个接口类型日志框架：JCL。</p><p>当然初始目的是好的，让用户可以在Log4j和JUL日志框架间进行自由切换。这里面还有个坑，JCL自带了个默认实现，就是Simple Log ，这个日志实现导致实际上有了三种日志实现框架。</p><p>看第一版发布日期，应该是apache想和Sun对干或者想统一日志江湖。与Sun JUL发布相差6个月。</p><p>这个框架应该是没有Ceki 参与，<br>S<br><img src="/images/2021-08-01/image2021-3-10_18_15_39.png"> </p><p>实际使用中，虽然JCL能实现日志框架的统一，比较优雅，但是使用中遇到的问题还是很多。</p><p>有个吐槽，说明一切<br><img src="/images/2021-08-01/image2021-3-10_18_24_3.png"> </p><p>jcl 推出后，log的统一可以如下：<br><img src="/images/2021-08-01/image2021-3-10_18_24_3.png"> </p><h3 id="2-5-争霸开始：Slf4j-接口框架和桥的诞生"><a href="#2-5-争霸开始：Slf4j-接口框架和桥的诞生" class="headerlink" title="2.5 争霸开始：Slf4j 接口框架和桥的诞生"></a>2.5 争霸开始：Slf4j 接口框架和桥的诞生</h3><p>大神来了</p><p>2006年，Log4j的作者Ceki Gülcü离开Apache后，觉得J.C.L这套接口设计的不好，容易让开发者写出有性能问题的代码。</p><p>也是仿照J.C.L的接口类，自己搞出了一套接口框架，就是Slf4j。</p><p>但是Slf4j只有接口，没有实现，大神也没有能力去推动apache log4j 和sun log 去实现Slf4j的接口，这里就体现出大神的牛逼了，自己写各适配器。。。</p><p>适配器可解决一切，桥接是万能的。。哈哈哈。。。这里就开始出现混乱的东西了：</p><p>大神先写了桥接jul和log4j的包，结构如下</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>LogFramework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Log</tag>
      
      <tag>Log4j</tag>
      
      <tag>Slf4j</tag>
      
      <tag>logback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA源码--StringBuffer,StringBuilder,String</title>
    <link href="/2021/05/18/2017-05-18-JAVA-SRC-StringBuffer-StringBuilder/"/>
    <url>/2021/05/18/2017-05-18-JAVA-SRC-StringBuffer-StringBuilder/</url>
    
    <content type="html"><![CDATA[<p>StringBuffer,StringBuilder,String 类源码实现机制详解</p><p><img src="/images/2017-05-18/JAVA-SRC-StringBuffer-StringBuilder-StringBuffer.jpg"><br><img src="/images/2017-05-18/JAVA-SRC-StringBuffer-StringBuilder-StringBuilder.jpg"></p><h2 id="二者区别与联系"><a href="#二者区别与联系" class="headerlink" title="二者区别与联系"></a>二者区别与联系</h2><blockquote><p>二都都继承自父类AbstractStringBuilder</p></blockquote><blockquote><p>对应方法中，StringBuffer 加入了synchronized所以说是线程安全的</p></blockquote><h3 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h3><blockquote><p>机制源于父类AbstractStringBuilder</p></blockquote><ol><li><p>计算最小长度</p></li><li><p>按原串双倍计算，如果小，则直接加上后串的长度</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Appendable</span>, CharSequence &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The value is used for character storage.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">char</span>[] value;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The count is the number of characters used.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> count;<br><br>        ....<br><br>        <span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(String str)</span> &#123;<br>            <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> appendNull();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> str.length();<br>            ensureCapacityInternal(count + len);<br>            str.getChars(<span class="hljs-number">0</span>, len, value, count);<br>            count += len;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        ....<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>            <span class="hljs-comment">// overflow-conscious code</span><br>            <span class="hljs-keyword">if</span> (minimumCapacity - value.length &gt; <span class="hljs-number">0</span>)<br>                expandCapacity(minimumCapacity);<br>        &#125;    <br>        <br>        ....<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">expandCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> value.length * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (newCapacity - minimumCapacity &lt; <span class="hljs-number">0</span>)<br>                newCapacity = minimumCapacity;<br>            <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (minimumCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>                newCapacity = Integer.MAX_VALUE;<br>            &#125;<br>            value = Arrays.copyOf(value, newCapacity);<br>        &#125;            <br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="String-的不可变性"><a href="#String-的不可变性" class="headerlink" title="String 的不可变性"></a>String 的不可变性</h2><p><a href="https://www.zhihu.com/question/20618891"><strong>String 不可变参考</strong></a> </p><p>String 的不可变性在其源码中可以看出为什么不可变：</p><ol><li>String是类型的，不可继承，防止被子类修改</li><li>其本质为char数组，采用了private final修饰，就可以避免我们手动修改数组内的内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** String本质是个char数组. 而且用final关键字修饰.</span><br><span class="hljs-comment">    String是不可变的关键都在底层的实现，而不是一个final</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br><br>    <span class="hljs-comment">/** Cache the hash code for the string */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hash; <span class="hljs-comment">// Default to 0</span><br><br><br>    ....<br><br>    ....<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>SourceCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>StringBuffer</tag>
      
      <tag>StringBuilder</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下 Git，TortoiseGit及Git在IDE工具中的使用</title>
    <link href="/2017/05/18/2017-09-12-how-to-use-git-and-ide/"/>
    <url>/2017/05/18/2017-09-12-how-to-use-git-and-ide/</url>
    
    <content type="html"><![CDATA[<p>Git，TortoiseGit及Git在IDE工具中的使用</p><hr><h2 id="一-Git基础介绍"><a href="#一-Git基础介绍" class="headerlink" title="一. Git基础介绍"></a>一. Git基础介绍</h2><ul><li><p>要认识Git是做什么的，为什么要使用这个工具，就需要先阅读一下Git相关的入门知识，及与其他版本控制工具的异同，优劣。</p></li><li><p><strong>注意：本文重点偏重于Git,TortoiseGit以及Git在IDEA等开发工具日常安装与使用上。其中对TortoiseGit和IDEA的使用会着重讲，但是对Git命令行操作，不做讲解，如想了解git bash相关命令，可点击下面两篇资料进行学习。</strong></p></li><li><p>对于Git的认识及入门知识，笔者先贴两篇资料，可以先补充一下这方面知识，或者做全面学习资料亦可：</p></li></ul><blockquote><pre><code class="hljs">Git起步：&lt;http://blog.jobbole.com/25775/&gt; , &lt;https://git-scm.com/book/zh/v2&gt;</code></pre></blockquote><blockquote><pre><code class="hljs">Git教程：&lt;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&gt;</code></pre></blockquote><h2 id="二-Git-与-TortoiseGit-安装"><a href="#二-Git-与-TortoiseGit-安装" class="headerlink" title="二. Git 与 TortoiseGit 安装"></a>二. Git 与 TortoiseGit 安装</h2><blockquote><p>Git 下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p></blockquote><blockquote><p>TortoiseGit 下载地址：<a href="https://tortoisegit.org/download">https://tortoisegit.org/download</a> </p></blockquote><p>按自己的操作系统选择下载相应版本。</p><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p>先安装Git.xxx.exe，安装路径自己设置或者默认，其他选项都按默认来就行。其中需要说明中间几个选项的意思：</p><p><img src="/images/2017-09-12/git-1.jpg" alt="Git安装过程-图1"> 图-2.1</p><ul><li><p>选项1 ：此选项不会先环境变量中加入git命令目录，只能使用Git Bash命令行操作。不建议新手安装此项。</p></li><li><p>选项2 ：默认选项，只会加入最小量的信息到环境变量中，可以使用Git Bash 和windows 命令行进行操作。建议安装此项。</p></li><li><p>选项3 ：此项会把unix tools 相关命令和Git Bash命令都加入到windows环境变量中，会污染系统，比如会覆盖掉windows自带的find等命令，不建议安装此项。</p></li></ul><hr><p><img src="/images/2017-09-12/git-2.jpg" alt="Git安装过程-图2"> 图-2.2</p><blockquote><p>CRLF是Carriage-Return Line-Feed的缩写，意思是回车换行，就是回车(CR, ASCII 13, \r) 换行(LF, ASCII 10, \n)<br>windows系统默认换行是两个字符\r\n，即CRLF；；unix和linux系统的换行符只有一个字符\n，即LF。<br>此安装选项就是设置windows和unix类系统下，换行符的转换。</p></blockquote><ul><li><p>选项1 ：git check out代码下来到windows系统时，转换LF为CRLF，即转为windows换行符。当commit 操作时，转换CRLF为LF，即转为unix换行符。此选项比较推荐用于跨平台的代码情况下，在windows机器上安装git时，比如git 远程仓库的所在系统为linux系统，本地开发环境为windows时。用此项。</p></li><li><p>选项2 ：check out时，不进行转换，只有commit时，才转换CRLF 为LF，此项用于跨平台时，linux和unix环境机器上安装git时，选用些项。</p></li><li><p>选项3 ：check out 和  commit时都不进行转换，这种只能用于相同平台下的开发。不建议用在跨平台的代码系统中。</p></li></ul><hr><p><img src="/images/2017-09-12/git-3.jpg" alt="Git安装过程-图3"> 图-2.3 </p><p><img src="/images/2017-09-12/git-4.jpg" alt="Git安装过程-图3"> 图-2.4</p><ul><li><p>选项1 ：Git Bash命令在MinTTY中进行操作，也可以在windows命令行操作。（图-2.4即为安装好后，MinTTY，分为shell和gui两种界面。如果安装了TortoiseGit，这个基本就不需要用了，但是还是建议安装这个选项）</p></li><li><p>选项2 ：只使用windows命令行操作。</p></li></ul><hr><p>其他安装都用默认即可。</p><h4 id="2-安装TortoiseGit"><a href="#2-安装TortoiseGit" class="headerlink" title="2. 安装TortoiseGit"></a>2. 安装TortoiseGit</h4><p>安装TortoiseGit比较简单，只需要按默认安装即可。安装路径可自己修改。</p><hr><h2 id="三-TortoiseGit-使用"><a href="#三-TortoiseGit-使用" class="headerlink" title="三. TortoiseGit 使用"></a>三. TortoiseGit 使用</h2><p>着重讲述TortoiseGit 界面操作的使用。</p><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h3><p>创建仓库有两种方式。一种是在本地创建，然后push到远程地址。另一种是在远程创建好仓库后，clone仓库到本地。</p><h5 id="远程创建，pull到本地"><a href="#远程创建，pull到本地" class="headerlink" title="远程创建，pull到本地"></a>远程创建，pull到本地</h5><ul><li><strong>在远程创建仓库后或者直接取已经创建好的远程仓库链接，git    clone到本地文件夹。</strong></li></ul><p>以GitHub 为例：登录github帐号后，new repository,新建一个仓库。然后复制连接（比如：<a href="https://github.com/abuzhi/rdb-to-hbase.git%EF%BC%89%EF%BC%8C">https://github.com/abuzhi/rdb-to-hbase.git），</a><br>在windows本地机上打开一个文件夹，空白处右击鼠标，选择git clone：（图-2.5）</p><figure class="half">    <img src="/images/2017-09-12/git-5.jpg">    <img src="/images/2017-09-12/git-6.jpg"></figure><p>图-2.6默认点ok即可下载远程仓库代码到本地文件夹。下载完成后，本地文件夹如图：（图-2.7）</p><p><img src="/images/2017-09-12/git-7.jpg" alt="Git安装过程-图7"> 图-2.7</p><p>其中.git 文件夹默认是隐藏文件，需要开启windows显示隐藏文件功能才能查看。（笔者这里是开了的）</p><p>其他打了对勾的文件就是受git版本控制中的文件。</p><h5 id="本地创建，push到远程"><a href="#本地创建，push到远程" class="headerlink" title="本地创建，push到远程"></a>本地创建，push到远程</h5><ul><li><strong>在本地创建文件夹和仓库，git  push到远程库。</strong></li></ul><p>有一种情形，比如我本地已经在开发某个项目了，开发了一部分后，我想把这个放入git，让其他人也下载下来开发。这时，需要首先在远程仓库先创建一个空的repostory。</p><p>依然以github为例：</p><p>在github登录自己帐号，创建一个空的仓库（图-2.8）</p><p><img src="/images/2017-09-12/git-8.jpg" alt="Git安装过程-图8"></p><p>把本地开发目录加入git</p><p>比如我在本地的开发目录是这样的（图-2-9），我需要把这个test-git123目录push到远程上面建立的仓库中。</p><p><img src="/images/2017-09-12/git-9.jpg" alt="Git安装过程-图9"></p><p>操作如下：先在文件夹空白处右击，选create repostory here…，弹框点ok，在此处建立仓库。这里建立的是本地仓库，除了不能push代码到远程，其他相关的git操作和版本控制都可以正常进行。</p><p><img src="/images/2017-09-12/git-10.jpg" alt="Git安装过程-图10"></p><p>创建成功后，就有了.git文件夹，还有其他文件会多了问号标志。这个是什么含义？下面会分节来介绍相关图标的含义。现在暂时不管，你只需要知道这些带问号图标的文件，是属于被git识别，但是还未加入版本控制内的文件。如图-2.11</p><p><img src="/images/2017-09-12/git-11.jpg" alt="Git安装过程-图11"></p><p>创建本地库成功后，把本文件夹内除去.git文件夹之外的文件，都加入到git版本控制中。<br>如图-2.12，选择要加入版本控制的文件，右击，按图选择加入。弹框后，如图-2.13，select all或者按自己需要选择要加入的文件。</p><p><img src="/images/2017-09-12/git-12.jpg" alt="Git安装过程-图11"></p><p><img src="/images/2017-09-12/git-13.jpg" alt="Git安装过程-图11"></p><p>上面文件加入完成后，再空白处右击，commit -&gt; master （图-2.15）,弹出提交框后，要写入本次提交修改的注释，这个最好还是写明每次提交都有那些改进，方便开发和版本回滚（图-2.16）。</p><p><img src="/images/2017-09-12/git-15.jpg" alt="Git安装过程-图15"><br><img src="/images/2017-09-12/git-16.jpg" alt="Git安装过程-图15"></p><h3 id="2-版本控制流程"><a href="#2-版本控制流程" class="headerlink" title="2.版本控制流程"></a>2.版本控制流程</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>版本控制</tag>
      
      <tag>Git</tag>
      
      <tag>TortoiseGit</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收藏的优质Blog</title>
    <link href="/2017/05/18/2017-10-24-blogs/"/>
    <url>/2017/05/18/2017-10-24-blogs/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-博客"><a href="#Java-博客" class="headerlink" title="Java 博客"></a>Java 博客</h2><ol><li><p><a href="http://www.cnblogs.com/luxiaoxun/">http://www.cnblogs.com/luxiaoxun/</a></p></li><li><p><a href="http://blog.csdn.net/column/details/javarestarting.html">http://blog.csdn.net/column/details/javarestarting.html</a></p></li><li><p><a href="http://www.cnblogs.com/xrq730/category/733883.html">http://www.cnblogs.com/xrq730/category/733883.html</a></p></li><li><p><a href="http://blog.csdn.net/liweisnake/article/category/1619757">http://blog.csdn.net/liweisnake/article/category/1619757</a></p></li><li><p><a href="http://www.cnblogs.com/java-my-life/">http://www.cnblogs.com/java-my-life/</a></p></li><li><p><a href="http://blog.csdn.net/u013256816">http://blog.csdn.net/u013256816</a></p></li><li><p><a href="https://monkeysayhi.github.io/">https://monkeysayhi.github.io/</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2016/05/18/2016-05-18-use-markdown/"/>
    <url>/2016/05/18/2016-05-18-use-markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><p>主要参考以下文档：</p><p>1.github 官方：<a href="https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax</a></p><p>2.在线编辑demo：<a href="https://markdown-it.github.io/">https://markdown-it.github.io/</a></p><h1 id="语法demo"><a href="#语法demo" class="headerlink" title="语法demo"></a>语法demo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs markdonw">---<br>__Advertisement :)__<br><br>- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image<br>  resize in browser.<br>- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly<br>  i18n with plurals support and easy syntax.<br><br>You will like those projects!<br><br>---<br><br># h1 Heading 8-)<br>## h2 Heading<br>### h3 Heading<br>#### h4 Heading<br>##### h5 Heading<br>###### h6 Heading<br><br><br>## Horizontal Rules<br><br>___<br><br>---<br><br>***<br><br><br>## Typographic replacements<br><br>Enable typographer option to see result.<br><br>(c) (C) (r) (R) (tm) (TM) (p) (P) +-<br><br>test.. test... test..... test?..... test!....<br><br>!!!!!! ???? ,,  -- ---<br><br>&quot;Smartypants, double quotes&quot; and &#x27;single quotes&#x27;<br><br><br>## Emphasis<br><br>**This is bold text**<br><br>__This is bold text__<br><br>*This is italic text*<br><br>_This is italic text_<br><br>~~Strikethrough~~<br><br><br>## Blockquotes<br><br><br>&gt; Blockquotes can also be nested...<br>&gt;&gt; ...by using additional greater-than signs right next to each other...<br>&gt; &gt; &gt; ...or with spaces between arrows.<br><br><br>## Lists<br><br>Unordered<br><br>+ Create a list by starting a line with `+`, `-`, or `*`<br>+ Sub-lists are made by indenting 2 spaces:<br>  - Marker character change forces new list start:<br>    * Ac tristique libero volutpat at<br>    + Facilisis in pretium nisl aliquet<br>    - Nulla volutpat aliquam velit<br>+ Very easy!<br><br>Ordered<br><br>1. Lorem ipsum dolor sit amet<br>2. Consectetur adipiscing elit<br>3. Integer molestie lorem at massa<br><br><br>1. You can use sequential numbers...<br>1. ...or keep all the numbers as `1.`<br><br>Start numbering with offset:<br><br>57. foo<br>1. bar<br><br><br>## Code<br><br>Inline `code`<br><br>Indented code<br><br>    // Some comments<br>    line 1 of code<br>    line 2 of code<br>    line 3 of code<br><br><br>Block code &quot;fences&quot;<br><br>```<br>Sample text here...<br>```<br><br>Syntax highlighting<br><br>``` js<br>var foo = function (bar) &#123;<br>  return bar++;<br>&#125;;<br><br>console.log(foo(5));<br>```<br><br>## Tables<br><br>| Option | Description |<br>| ------ | ----------- |<br>| data   | path to data files to supply the data that will be passed into templates. |<br>| engine | engine to be used for processing templates. Handlebars is the default. |<br>| ext    | extension to be used for dest files. |<br><br>Right aligned columns<br><br>| Option | Description |<br>| ------:| -----------:|<br>| data   | path to data files to supply the data that will be passed into templates. |<br>| engine | engine to be used for processing templates. Handlebars is the default. |<br>| ext    | extension to be used for dest files. |<br><br><br>## Links<br><br>[link text](http://dev.nodeca.com)<br><br>[link with title](http://nodeca.github.io/pica/demo/ &quot;title text!&quot;)<br><br>Autoconverted link https://github.com/nodeca/pica (enable linkify to see)<br><br><br>## Images<br><br>![Minion](https://octodex.github.com/images/minion.png)<br>![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg &quot;The Stormtroopocat&quot;)<br><br>Like links, Images also have a footnote style syntax<br><br>![Alt text][id]<br><br>With a reference later in the document defining the URL location:<br><br>[id]: https://octodex.github.com/images/dojocat.jpg  &quot;The Dojocat&quot;<br><br><br>## Plugins<br><br>The killer feature of `markdown-it` is very effective support of<br>[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).<br><br><br>### [Emojies](https://github.com/markdown-it/markdown-it-emoji)<br><br>&gt; Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:<br>&gt;<br>&gt; Shortcuts (emoticons): :-) :-( 8-) ;)<br><br>see [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.<br><br><br>### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)<br><br>- 19^th^<br>- H~2~O<br><br><br>### [\&lt;ins&gt;](https://github.com/markdown-it/markdown-it-ins)<br><br>++Inserted text++<br><br><br>### [\&lt;mark&gt;](https://github.com/markdown-it/markdown-it-mark)<br><br>==Marked text==<br><br><br>### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)<br><br>Footnote 1 link[^first].<br><br>Footnote 2 link[^second].<br><br>Inline footnote^[Text of inline footnote] definition.<br><br>Duplicated footnote reference[^second].<br><br>[^first]: Footnote **can have markup**<br><br>    and multiple paragraphs.<br><br>[^second]: Footnote text.<br><br><br>### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)<br><br>Term 1<br><br>:   Definition 1<br>with lazy continuation.<br><br>Term 2 with *inline markup*<br><br>:   Definition 2<br><br>        &#123; some code, part of Definition 2 &#125;<br><br>    Third paragraph of definition 2.<br><br>_Compact style:_<br><br>Term 1<br>  ~ Definition 1<br><br>Term 2<br>  ~ Definition 2a<br>  ~ Definition 2b<br><br><br>### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)<br><br>This is HTML abbreviation example.<br><br>It converts &quot;HTML&quot;, but keep intact partial entries like &quot;xxxHTMLyyy&quot; and so on.<br><br>*[HTML]: Hyper Text Markup Language<br><br>### [Custom containers](https://github.com/markdown-it/markdown-it-container)<br><br>::: warning<br>*here be dragons*<br>:::<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
